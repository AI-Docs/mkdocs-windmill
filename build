#!/bin/bash

# Usage:
#   ./build         -- just build the test files
#   ./build run     -- run a development server, start browser, and rebuild test on changes.

# Find the mkdocs command
if hash mkdocs 2>/dev/null; then
  MKDOCS=mkdocs
else
  MKDOCS=`pwd`/env/bin/mkdocs
fi

# If it's not available, show helpful instructions.
if [[ ! -x "$MKDOCS" ]]; then
  echo 'Build requires mkdocs in PATH or in env/.'
  echo 'Please run `virtualenv env && env/bin/pip install mkdocs`.'
  exit 2
fi

( cd test/mkdocs && $MKDOCS build -s -c -e ../../windmill -d outputs )


if [[ "$1" = "run" ]]; then
  NODE_BIN=node_modules/.bin
  PORT=8600

  if [[ ! -x "$NODE_BIN/static" || ! -x "$NODE_BIN/chokidar" ]]; then
    echo '"build run" requires certain node modules.'
    echo 'Please run `mkdir node_modules ; npm install node-static ; npm install chokidar-cli`.'
    exit 2
  fi


  $NODE_BIN/static -p $PORT test/mkdocs/outputs/ &
  echo "Starting server PID $!"

  $NODE_BIN/chokidar windmill/ test/mkdocs/mkdocs.yml test/mkdocs/docs/ -c './build' &
  echo "Starting watcher PID $!"

  background_jobs=`jobs -pr`
  background_jobs=`echo $background_jobs`   # convert newlines to spaces
  trap "echo Stopping PIDs $background_jobs ; kill $background_jobs 2>/dev/null" INT TERM EXIT

  python -mwebbrowser http://127.0.0.1:$PORT
  wait
fi

